import logging
import uuid
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = '7898034491:AAEn4exf46sdViv9VLJQ385lYRQS4p2tXk0'  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
SUPPORT_GROUP_ID = -4908403310  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
applications = {}  # application_id -> {'user_id': ..., 'category': ..., 'text': ..., 'screenshot_file_id': ...}
user_states = {}  # user_id -> {'state': 'choosing_category'/'waiting_text'/'waiting_screenshot', 'category': ..., 'application_id': ...}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
CATEGORIES = ["1–°", "Mpfit", "–ë–∏—Ç—Ä–∏–∫—Å24", "–î—Ä—É–≥–æ–µ"]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard = [
        [InlineKeyboardButton(cat, callback_data=cat)] for cat in CATEGORIES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )
    user_id = update.message.from_user.id
    user_states[user_id] = {'state': 'choosing_category'}

async def handle_category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    category = query.data
    user_id = query.from_user.id

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    user_states[user_id] = {
        'state': 'waiting_text',
        'category': category
    }
    await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –≤—ã–±—Ä–∞–Ω–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    state_info = user_states.get(user_id)
    if not state_info or state_info.get('state') != 'waiting_text':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    category = state_info['category']
    text_message = update.message.text

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
    application_id = str(uuid.uuid4())
    applications[application_id] = {
        'user_id': user_id,
        'username': update.message.from_user.username,
        'category': category,
        'text': text_message,
        'screenshot_file_id': None
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞
    user_states[user_id] = {
        'state': 'waiting_screenshot',
        'application_id': application_id
    }

    await update.message.reply_text(
        "–¢–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)."
    )

async def handle_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    state_info = user_states.get(user_id)
    if not state_info or state_info.get('state') != 'waiting_screenshot':
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        return

    application_id = state_info['application_id']
    
    if not update.message.photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip.")
        return
    
    photo_file_id = update.message.photo[-1].file_id  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å —Ñ–æ—Ç–æ
    applications[application_id]['screenshot_file_id'] = photo_file_id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å ID –∑–∞—è–≤–∫–∏
    app_data = applications[application_id]
    
    caption_lines = [
        f"üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
        f"üÜî –ó–∞—è–≤–∫–∞ ID: {application_id}",
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username or update.message.from_user.first_name} (ID: {app_data['user_id']})",
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {app_data['category']}",
        f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞:\n{app_data['text']}",
        f"üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç: –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
    ]
    
    caption_text = "\n".join(caption_lines)

    try:
        await context.bot.send_photo(
            chat_id=SUPPORT_GROUP_ID,
            photo=photo_file_id,
            caption=caption_text,
            parse_mode='HTML'
        )
        await update.message.reply_text(f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:[{application_id}] \n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã  —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–Ω-–ø—Ç 09:00 –¥–æ 18:00 –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
        del user_states[user_id]
        
        # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–µ (–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
        
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

async def handle_skip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /skip ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞."""
    
    user_id = update.message.from_user.id
    
    state_info = user_states.get(user_id)
    if not state_info or state_info.get('state') != 'waiting_screenshot':
       await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
       return
    
    application_id = state_info['application_id']
    app_data = applications[application_id]
   
    caption_lines = [
       f"üÜï –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ",
       f"üÜî –ó–∞—è–≤–∫–∞ ID: {application_id}",
       f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{update.message.from_user.username or update.message.from_user.first_name} (ID: {app_data['user_id']})",
       f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {app_data['category']}",
       f"üí¨ –ü—Ä–æ–±–ª–µ–º–∞:\n{app_data['text']}",
       f"üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
   ]
   
    caption_text = "\n".join(caption_lines)
   
    try:
       await context.bot.send_message(
           chat_id=SUPPORT_GROUP_ID,
           text=caption_text,
           parse_mode='HTML'
       )
       await update.message.reply_text(f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: [{application_id}] \n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã  —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–Ω-–ø—Ç 12:00 –¥–æ 16:00 –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")
       
       del user_states[user_id]
       
    except Exception as e:
       await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def support_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
     –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:
      /reply ID_–∑–∞—è–≤–∫–∏ –¢–ï–ö–°–¢_–æ—Ç–≤–µ—Ç–∞
      –ù–∞–ø—Ä–∏–º–µ—Ä:
      /reply 123e4567-e89b-12d3-a456-426614174000 –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã...
      
      –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ ID –∑–∞—è–≤–∫–∏.
      
      –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/reply".
      
      –í–Ω–∏–º–∞–Ω–∏–µ! –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
      
      –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥.
      
      –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç–∞–∫:
      
      """
    
    if len(update.message.text.split(' ', 2)) < 3:
       await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/reply ID_–∑–∞—è–≤–∫–∏ –≤–∞—à_–æ—Ç–≤–µ—Ç")
       return
    
    parts = update.message.text.split(' ', 2)
    reply_to_application_id = parts[1]
    reply_text = parts[2]
   
    application_data = applications.get(reply_to_application_id)
   
    if not application_data:
       await update.message.reply_text("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
       return
   
    user_chat_id = application_data['user_id']
   
    try:
       await context.bot.send_message(
           chat_id=user_chat_id,
           text=f"–û—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n{reply_text}"
       )
       await update.message.reply_text("–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
       await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

def main():
   app = ApplicationBuilder().token(TOKEN).build()

   app.add_handler(CommandHandler('start', start))
   
   app.add_handler(CallbackQueryHandler(handle_category_selection))
   
   app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_text))
   
   app.add_handler(MessageHandler(filters.PHOTO & (~filters.COMMAND), handle_screenshot))
   
   app.add_handler(CommandHandler('skip', handle_skip))
   
   app.add_handler(CommandHandler('reply', support_reply))
   
   # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   app.run_polling()

if __name__ == '__main__':
   main()